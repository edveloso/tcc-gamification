package com.unigranrio.tcc.control;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.unigranrio.tcc.dao.ConquistaDAO;
import com.unigranrio.tcc.dao.ExercicioDAO;
import com.unigranrio.tcc.dao.NivelDAO;
import com.unigranrio.tcc.dao.ProgressoDAO;
import com.unigranrio.tcc.dao.UsuarioDAO;
import com.unigranrio.tcc.exercicio.Programa;
import com.unigranrio.tcc.model.ConquistaBean;
import com.unigranrio.tcc.model.ExercicioJavaBean;
import com.unigranrio.tcc.model.ExercicioUmlBean;
import com.unigranrio.tcc.model.RespostaBean;
import com.unigranrio.tcc.model.UsuarioBean;
import com.unigranrio.tcc.model.entity.Assunto;
import com.unigranrio.tcc.model.entity.Conquista;
import com.unigranrio.tcc.model.entity.Exercicio;
import com.unigranrio.tcc.model.entity.ExercicioJava;
import com.unigranrio.tcc.model.entity.ExercicioUml;
import com.unigranrio.tcc.model.entity.Nivel;
import com.unigranrio.tcc.model.entity.Progresso;
import com.unigranrio.tcc.model.entity.Usuario;
import com.unigranrio.tcc.security.CodigoValidator;

@Transactional
@Controller
public class ExercicioControle {

	private Programa programa = new Programa();
	private ExercicioDAO exercicioDAO;
	private UsuarioDAO usuarioDAO;
	private ConquistaDAO conquistaDAO;
	private ProgressoDAO progressoDAO;
	private NivelDAO nivelDAO;
	private RespostaBean retornoJava;

	@Autowired
	public void setDAOs(ExercicioDAO exercicioDAO, UsuarioDAO usuarioDAO,
			ConquistaDAO conquistaDAO, ProgressoDAO progressoDAO,
			NivelDAO nivelDAO) {
		this.exercicioDAO = exercicioDAO;
		this.usuarioDAO = usuarioDAO;
		this.conquistaDAO = conquistaDAO;
		this.progressoDAO = progressoDAO;
		this.nivelDAO = nivelDAO;
	}

	@RequestMapping(value = "/modulo/java/assunto/exercicio/{exercicioJava}", method = RequestMethod.GET)
	public @ResponseBody ExercicioJavaBean getExercicioJava(
			@PathVariable long exercicioJava) {
		ExercicioJava exJava = exercicioDAO
				.buscarExercicioJavaById(exercicioJava);
		ExercicioJavaBean exJavaBean = exJava.getExercicioJavaBean();

		return exJavaBean;
	}

	@RequestMapping(value = "/modulo/java/assunto/exercicio/{exercicioJava}", method = RequestMethod.POST)
	public @ResponseBody RespostaBean receberRespostaExercicioJava(
			@RequestBody RespostaBean codigo) {
		System.out.println("Codigo Recebido: " + codigo.getCodigo());
		String respostaCodigo = codigo.getCodigo().trim();
		respostaCodigo = respostaCodigo.replace("\n", "");
		respostaCodigo = respostaCodigo.replace(" ", "");
		CodigoValidator validar = new CodigoValidator();

		if (validar.validarCodigo(respostaCodigo) == false) {
			codigo.setResposta("Codigo Malicioso");
			return codigo;
		}

		String respostaConsole = programa.executar(codigo.getCodigo());
		System.out.println("Resposta da Compilação: " + respostaConsole);
		RespostaBean retornoJava = codigo;
		retornoJava.setResposta(respostaConsole);
		return retornoJava;
	}

	@RequestMapping(value = "/modulo/uml/assunto/exercicio/{exercicioUml}", method = RequestMethod.GET)
	public @ResponseBody ExercicioUmlBean getExercicioUml(
			@PathVariable long exercicioUml) {

		ExercicioUml exUml = exercicioDAO.buscarExercicioUmlById(exercicioUml);
		ExercicioUmlBean exUmlBean = exUml.getExercicioUmlBean();
		exUmlBean.setAlternativas(exUml.getAlternativasBean());

		return exUmlBean;
	}

	@RequestMapping(value = "/modulo/assunto/{assuntoId}/exercicio/{exercicio}", method = RequestMethod.GET)
	public @ResponseBody List<ConquistaBean> listarBadges(
			@PathVariable long assuntoId, @PathVariable long exercicio) {
		List<ConquistaBean> conquistasBean = new ArrayList<ConquistaBean>();
		Assunto assunto = new Assunto();
		assunto.setId(assuntoId);

		for (Conquista conquista : conquistaDAO.listarBadges(assunto)) {
			ConquistaBean conquistaBean = conquista.getConquistaBean();
			conquistasBean.add(conquistaBean);
		}
		return conquistasBean;
	}

	@RequestMapping(value = "/usuario/{login}", method = RequestMethod.PUT)
	public @ResponseBody RespostaBean atualizarBadgeUsuario(
			@PathVariable String login, @RequestBody ConquistaBean conquistaBean) {

		Conquista conquista = conquistaDAO.buscarConquista(conquistaBean.getId());
		Usuario usuario = usuarioDAO.buscarUsuarioByLogin(login);
		
		conquista.setUsuario(usuario);
		conquistaDAO.gravarConquista(conquista);

		Collection<Conquista> conquistas = usuario.getBadges();
		if (conquistas == null) {
			conquistas = new ArrayList<Conquista>();
			conquistas.add(novaConquista);

		} else {
			// if (!usuario.getBadges().contains(conquistaUsuario)) {
			conquistas.add(novaConquista);
			// }
		}

		usuario.setBadges(conquistas);
		usuarioDAO.atualizarProgressoUsuario(usuario);

		return null;
	}

	@RequestMapping(value = "/usuario/{login}", method = RequestMethod.POST)
	public @ResponseBody RespostaBean atualizarUsuario(
			@PathVariable String login,
			@RequestParam("exercicioId") long exercicioId,
			@RequestBody UsuarioBean pontos) {

		Usuario usuario = usuarioDAO.buscarUsuarioByLogin(login);
		usuario.setPontos(usuario.getPontos() + pontos.getPontos());
		usuarioDAO.atualizarPontosUsuario(usuario);

		Usuario usuarioAtualizado = usuarioDAO.buscarUsuarioByLogin(login);

		Exercicio exercicio = exercicioDAO.buscarExercicioById(exercicioId);
		Progresso progresso = new Progresso();
		progresso.setExercicio(exercicio);
		progresso.setUsuario(usuarioAtualizado);
		progressoDAO.gravarProgresso(progresso);

		List<Progresso> progressos = gerarProgresso(usuarioAtualizado,
				exercicio);
		usuarioAtualizado.setProgressos(progressos);

		long posicao = usuarioDAO.buscarPosicaoUsuario(usuarioAtualizado
				.getPontos());
		usuarioAtualizado.setPosicao((int) posicao);

		Nivel proxNivel = proximoNivel(usuarioAtualizado);
		usuarioAtualizado.setNivel(proxNivel);

		usuarioDAO.atualizarProgressoUsuario(usuarioAtualizado);

		return null;
	}

	private Nivel proximoNivel(Usuario usuario) {
		Nivel proxNivel = nivelDAO.buscarProximoNivel(usuario.getNivel()
				.getId());
		if (proxNivel != null && usuario.getPontos() > proxNivel.getPontos()) {
			return proxNivel;
		} else {
			return usuario.getNivel();
		}
	}

	private List<Progresso> gerarProgresso(Usuario usuario, Exercicio exercicio) {
		List<Progresso> progressos = new LinkedList<Progresso>();

		if (!usuarioDAO.listarProgressosUsuario(usuario.getLogin()).isEmpty()) {
			progressos = usuarioDAO.listarProgressosUsuario(usuario.getLogin());
			Progresso progressoUsuario = progressoDAO
					.buscarProgressoByUsuario(usuario);

			ArrayList<Exercicio> exercicios = new ArrayList<Exercicio>();
			for (Progresso progresso : progressos) {
				exercicios.add(progresso.getExercicio());
			}
			if (!exercicios.contains(progressoUsuario.getExercicio())) {
				float totalExercicios = exercicioDAO.buscarTodosExercicios()
						.size();
				float totalExerciciosUsuario = usuario.getProgressos().size() + 1;
				float porcentagem = (totalExerciciosUsuario / totalExercicios) * 100;
				progressoUsuario.setPorcentagem(porcentagem);
				progressos.add(progressoUsuario);
			}

			return progressos;

		} else {

			Progresso progressoUsuario = progressoDAO
					.buscarProgressoByUsuario(usuario);
			float totalExercicios = exercicioDAO.buscarTodosExercicios().size();
			float porcentagem = (1 / totalExercicios) * 100;
			progressoUsuario.setPorcentagem(porcentagem);
			progressos.add(progressoUsuario);
			return progressos;
		}
	}
}
